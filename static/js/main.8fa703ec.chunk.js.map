{"version":3,"sources":["components/AppButton.js","components/AnswerChoices.js","components/QuestionDisplay.js","components/WelcomeDisplay.js","components/CompletedDisplay.js","services/opentdb.js","App.js","reportWebVitals.js","index.js"],"names":["AppButton","props","value","onClick","text","Button","size","variant","color","AnswerChoices","correct","incorrect","clickHandler","shuffledAnswers","lst","concat","sort","Math","random","console","log","shuffle","Grid","container","direction","justify","flex-wrap","align-items","map","ans","className","Number","window","atob","QuestionDisplay","questionData","question","correct_answer","incorrect_answers","WelcomeDisplay","style","fontFamily","CompletedDisplay","answers","b","reduce","a","length","axios","get","then","res","data","INITIAL_ANSWERS","App","useState","currNumber","setNumber","setAnswers","questions","setQuestion","useEffect","axiosServices","results","event","preventDefault","updatedAnswers","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fa703ec.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from '@material-ui/core';\n\nconst AppButton = (props) => {\n    const { value, onClick, text } = props;\n    return(\n        <Button \n            size=\"large\" \n            variant=\"contained\" \n            color=\"secondary\"\n            onClick={onClick}\n            value={value}\n        >\n        {text}\n        </Button>\n    );\n};\n\nexport default AppButton;","import React from 'react';\nimport AppButton from './AppButton';\nimport { Grid, Button } from '@material-ui/core';\nimport './assets/css/AnswerChoices.css';\n\nconst shuffle = (incorrect, correct) => {\n    const lst = incorrect.concat(correct).sort(() => Math.random() - 0.5);\n    console.log(lst);\n    return lst;\n}\n\nconst AnswerChoices = (props) => {\n    const { correct, incorrect, clickHandler } = props;\n    const shuffledAnswers = shuffle(incorrect, correct);\n    \n    return (\n        <Grid\n        container\n        direction=\"row\"\n        justify=\"space-around\"\n        flex-wrap=\"wrap\"\n        align-items=\"stretch\"\n        >\n            {shuffledAnswers.map(ans => \n                <div className=\"choice\">\n                    <Button \n                        size=\"large\" \n                        variant=\"contained\" \n                        color=\"secondary\"\n                        onClick={clickHandler}\n                        value={Number(correct === ans)}\n                        \n                    >\n                    {window.atob(ans)}\n                    </Button>\n                    {/*\n                    <AppButton\n                    value={correct === ans} \n                    onClick={clickHandler}\n                    text={window.atob(ans)}\n                    />*/}\n                </div>\n            )}\n        </Grid>\n    )\n}\n\nexport default AnswerChoices;","import React from 'react';\nimport AnswerChoices from './AnswerChoices';\n\nconst QuestionDisplay = (props) => {\n    const { questionData, clickHandler } = props;\n\n    return (\n        <>\n            <h1>{window.atob(questionData.question)}</h1>\n            <AnswerChoices\n            correct={questionData.correct_answer}\n            incorrect={questionData.incorrect_answers}\n            clickHandler={clickHandler}\n            />\n        </>\n    )\n}\n\nexport default QuestionDisplay;","import React from 'react';\nimport AppButton from './AppButton';\n\nconst WelcomeDisplay = (props) => {\n    const { clickHandler } = props;\n\n    return (\n        <>\n            <h1>\n                Welcome to <br /> \n                    <span style={{fontFamily:\"monospace\"}}>\n                        TrivIO\n                    </span>\n                !\n            </h1>\n            <AppButton\n            onClick={clickHandler}\n            value={0}\n            text=\"Take a Trivia Quiz\"\n            />\n        </>\n    );\n}\n\nexport default WelcomeDisplay;","import React from 'react';\nimport AppButton from './AppButton';\n\nconst CompletedDisplay = (props) => {\n    const { answers, clickHandler } = props;\n    return (\n        <>\n          <header className=\"App-header\">\n            <h1>\n              Completed<br />\n              You scored {answers.map(b => b ? 1 : 0).reduce((a, b) => a + b, 0)} out of {answers.length - 2}!\n            </h1>\n            <AppButton\n            onClick={clickHandler}\n            value={0}\n            text=\"Try Again\"\n            />\n          </header>\n        </>\n)};\n\nexport default CompletedDisplay;","import axios from 'axios';\n\nconst url = 'https://opentdb.com/api.php?amount=10&type=multiple&encode=base64';\n\nconst getRandomQuestions = () => axios.get(url).then(res => res.data);\n\nexport default { getRandomQuestions };","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport QuestionDisplay from './components/QuestionDisplay';\nimport WelcomeDisplay from './components/WelcomeDisplay';\nimport CompletedDisplay from './components/CompletedDisplay';\nimport axiosServices from './services/opentdb';\n\n// index-0 skipped to use 1-based indexing\nconst INITIAL_ANSWERS = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nfunction App() {\n  // for now, assume 10 questions\n  const [ currNumber, setNumber ] = useState(0); // 0 for Start Page, 1 - 10 questions, 11 finish page\n  const [ answers, setAnswers ] = useState(INITIAL_ANSWERS);\n  const [ questions, setQuestion ] = useState([]);\n\n  useEffect(() => {\n    if (currNumber === 0) {\n      console.log(\"retrieving\");\n      axiosServices.getRandomQuestions().then(data => \n        setQuestion([null].concat(data.results))\n      );\n    } else if (currNumber === 11) {\n      setQuestion([]);\n    }\n  }, [currNumber]);\n\n  console.log(questions[0]);\n  console.log(`Currently on question number ${currNumber}`);\n  const clickHandler = event => {\n    event.preventDefault();\n    let updatedAnswers = answers.concat(); // [...answers]\n    updatedAnswers[currNumber] = event.target.value;\n    setAnswers(updatedAnswers);\n    setNumber(questions.length || currNumber ? (currNumber + 1) % 12 : currNumber);\n  }\n\n  return (\n    <header className=\"App-header\">\n      {(currNumber === 0 && \n        <WelcomeDisplay clickHandler={clickHandler} />\n      )}\n      {(currNumber !== 11 && currNumber !== 0 && <div className=\"App\">\n        <QuestionDisplay questionData={questions[currNumber]} clickHandler={clickHandler}/>      \n      </div>)}\n      {(currNumber === 11 &&\n        <CompletedDisplay answers={answers} clickHandler={clickHandler} />\n      )}\n    </header>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}