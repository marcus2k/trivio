{"version":3,"sources":["components/AppButton.js","components/AnswerChoices.js","components/QuestionDisplay.js","components/DifficultyForm.js","components/assets/formStyles.js","components/CategoryForm.js","components/NumberOfQuestionsForm.js","components/WelcomeDisplay.js","components/CompletedDisplay.js","services/opentdb.js","App.js","reportWebVitals.js","index.js"],"names":["AppButton","props","value","onClick","text","Button","size","variant","color","AnswerChoices","correct","incorrect","clickHandler","shuffledAnswers","lst","concat","sort","Math","random","console","log","shuffle","Grid","container","direction","justify","flex-wrap","align-items","map","ans","className","Number","window","decodeURIComponent","QuestionDisplay","questionData","question","correct_answer","incorrect_answers","DifficultyForm","defaultValue","onChange","FormControl","component","FormLabel","RadioGroup","id","row","aria-label","name","Children","style","justifyContent","FormControlLabel","control","Radio","label","formStyles","makeStyles","theme","fieldset","formControl","margin","spacing","minWidth","selectEmpty","marginTop","CategoryForm","classes","useStyles","categories","InputLabel","Select","labelId","MenuItem","c","cat","includes","split","a","b","NumberOfQuestionsForm","WelcomeDisplay","numOfQuestionsHandler","categoryHandler","difficultyHandler","settings","href","target","difficulty","category","numQuestions","CompletedDisplay","answers","reduce","length","customUrl","url","amount","setCategory","setDifficulty","setUrl","axios","get","then","res","data","results","trivia_categories","INITIAL_ANSWERS","Uint8Array","App","useState","currNumber","setNumber","questions","setQuestion","setCategories","setQuizSettings","setAnswers","loading","setLoading","useEffect","axiosServices","event","preventDefault","updatedAnswers","currentTarget","updatedSettings","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b4ef84f.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from '@material-ui/core';\n\nconst AppButton = (props) => {\n    const { value, onClick, text } = props;\n    return(\n        <Button \n            size=\"large\" \n            variant=\"contained\" \n            color=\"secondary\"\n            onClick={onClick}\n            value={value}\n        >\n        {text}\n        </Button>\n    );\n};\n\nexport default AppButton;","import React from 'react';\nimport AppButton from './AppButton';\nimport { Grid } from '@material-ui/core';\nimport './assets/css/AnswerChoices.css';\n\nconst shuffle = (incorrect, correct) => {\n    const lst = incorrect.concat(correct).sort(() => Math.random() - 0.5);\n    console.log(lst);\n    return lst;\n}\n\nconst AnswerChoices = (props) => {\n    const { correct, incorrect, clickHandler } = props;\n    const shuffledAnswers = shuffle(incorrect, correct);\n    return (\n        <Grid\n        container\n        direction=\"row\"\n        justify=\"space-around\"\n        flex-wrap=\"wrap\"\n        align-items=\"stretch\"\n        >\n            {shuffledAnswers.map(ans => \n                <div key={ans} className=\"choice\">\n                    <AppButton\n                        onClick={clickHandler}\n                        value={Number(correct===ans)}\n                        text={window.decodeURIComponent(ans)}\n                    />\n                </div>\n            )}\n        </Grid>\n    )\n}\n\nexport default AnswerChoices;","import React from 'react';\nimport AnswerChoices from './AnswerChoices';\n\nconst QuestionDisplay = (props) => {\n    const { questionData, clickHandler } = props;\n\n    return (\n        <>\n            <h1>{window.decodeURIComponent(questionData.question)}</h1>\n            <AnswerChoices\n            correct={questionData.correct_answer}\n            incorrect={questionData.incorrect_answers}\n            clickHandler={clickHandler}\n            />\n        </>\n    )\n}\n\nexport default QuestionDisplay;","import React, { Children } from 'react';\nimport { FormControl, FormLabel, FormControlLabel, RadioGroup, Radio, Select, InputLabel, MenuItem } from '@material-ui/core';\n\nconst DifficultyForm = (props) => {\n        \n    const { defaultValue, onChange } = props;\n\n    return(\n        <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Difficulty</FormLabel>\n            <RadioGroup \n            id=\"difficulty\" \n            defaultValue={defaultValue || \"any\"} \n            row aria-label=\"difficulty\" \n            name=\"difficulty\" \n            value={Children.value}\n            onChange={onChange}\n            style={{justifyContent: \"center\"}}\n            >\n                <FormControlLabel value=\"any\" control={<Radio />} label=\"Mixed\" />\n                <FormControlLabel value=\"easy\" control={<Radio />} label=\"Easy\" />\n                <FormControlLabel value=\"medium\" control={<Radio />} label=\"Medium\" />\n                <FormControlLabel value=\"hard\" control={<Radio />} label=\"Hard\" />\n            </RadioGroup>\n        </FormControl>\n    )\n}\n\nexport default DifficultyForm;","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    props: {\n      fieldset: {\n        FormControl: 'secondary',\n      }\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n      color: 'white',\n    },\n}));\n\nconst formStyles = {\n  \"useStyles\": useStyles,\n}\nexport default formStyles;","import React, { Children } from 'react';\nimport formStyles from './assets/formStyles';\nimport { FormControl, Select, InputLabel, MenuItem } from '@material-ui/core';\n\nconst shortForm = cat => cat.includes(\":\") ? cat.split(\": \")[1] : cat;\n\nconst CategoryForm = (props) => {\n    const classes = formStyles.useStyles();\n    const { categories, defaultValue, onChange } = props;\n\n    return (\n        <FormControl className={classes.formControl}>\n            <InputLabel id=\"category-label\">Category</InputLabel>\n            <Select\n                style={{color: \"white\"}}\n                defaultValue={defaultValue || -1} // any category\n                labelId=\"demo-simple-select-label\"\n                id=\"category\"\n                value={Children.value}\n                onChange={onChange}\n                name=\"category\"\n            >\n                <MenuItem value={-1}><em>Mixed</em></MenuItem>\n                {categories\n                .map(c => ({id: c.id, name: shortForm(c.name)}))\n                .sort((a, b) => a.name > b.name ? 1 : -1)\n                .map(c => <MenuItem key={c.id} value={c.id}>{c.name}</MenuItem>)}\n            </Select>\n        </FormControl>\n    )\n}\n\nexport default CategoryForm;","import React, { Children } from 'react';\nimport { FormControl, Select, InputLabel, MenuItem } from '@material-ui/core';\nimport formStyles from './assets/formStyles'\n\nconst NumberOfQuestionsForm = (props) => {\n    const classes = formStyles.useStyles();\n    const { defaultValue, onChange } = props;\n    return (\n        <FormControl className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-label\"># of Questions</InputLabel>\n            <Select\n                style={{color: \"white\"}}\n                defaultValue={defaultValue || 10}\n                labelId=\"demo-simple-select-label\"\n                id=\"numQuestions\"\n                value={Children.value}\n                onChange={onChange}\n                name=\"numQuestions\"\n            >\n                <MenuItem value={5}>5</MenuItem>\n                <MenuItem value={10}>10</MenuItem>\n                <MenuItem value={15}>15</MenuItem>\n                <MenuItem value={20}>20</MenuItem>\n            </Select>\n        </FormControl>\n    )\n}\n\nexport default NumberOfQuestionsForm;","import React from 'react';\nimport AppButton from './AppButton';\nimport DifficultyForm from './DifficultyForm';\nimport CategoryForm from './CategoryForm';\nimport NumberOfQuestionsForm from './NumberOfQuestionsForm';\nimport './assets/css/WelcomeDisplay.css';\n\nconst WelcomeDisplay = (props) => {\n    const { clickHandler, categories, numOfQuestionsHandler, categoryHandler, difficultyHandler, settings } = props;\n\n    return (\n        <>\n            <h1>\n                Welcome to <br /> \n                    <span className=\"monospace\">\n                        TRIVIO!\n                    </span>\n            </h1>\n            <AppButton\n            onClick={clickHandler}\n            value={0}\n            text=\"Take a Trivia Quiz\"\n            />\n            <h5>by <a href=\"https://github.com/marcus2k\" target=\"_blank\" className=\"git-link\">Marcus</a></h5>\n            <DifficultyForm \n            defaultValue={settings.difficulty}\n            onChange={difficultyHandler}\n            />\n            <CategoryForm\n            defaultValue={settings.category}\n            onChange={categoryHandler}\n            categories={categories}\n            />\n            <NumberOfQuestionsForm\n            defaultValue={settings.numQuestions}\n            onChange={numOfQuestionsHandler}\n            />\n        </>\n    );\n}\n\nexport default WelcomeDisplay;","import React from 'react';\nimport AppButton from './AppButton';\n\nconst CompletedDisplay = (props) => {\n    const { answers, clickHandler } = props;\n    return (\n        <>\n          <header className=\"App-header\">\n            <h1>\n              Completed<br />\n              You scored {answers.map(b => b ? 1 : 0).reduce((a, b) => a + b, 0)} out of {answers.length - 2}!\n            </h1>\n            <AppButton\n            onClick={clickHandler}\n            value={0}\n            text=\"Return to Home\"\n            />\n          </header>\n        </>\n)};\n\nexport default CompletedDisplay;","import axios from 'axios';\n\nconst url = 'https://opentdb.com/api.php?type=multiple&encode=url3986'\n\nconst setCategory = (category) => category === -1 ? '' : `category=${category}`;\n\nconst setDifficulty = (difficulty) => difficulty === \"any\" ? '' : `difficulty=${difficulty}`;\n\nconst setUrl = (url, amount, category, difficulty) => \n    url + `&amount=${amount}&${setCategory(category)}&${setDifficulty(difficulty)}`;\n\nconst categoriesUrl = \"https://opentdb.com/api_category.php\";\n\nconst getRandomQuestions = (settings) => {\n    const { difficulty, numQuestions, category } = settings;\n    const customUrl = setUrl(url, numQuestions, category, difficulty);\n    console.log(customUrl);\n    return axios.get(customUrl).then(res => res.data.results);\n}\n\nconst getCategories = () => axios.get(categoriesUrl).then(res => res.data.trivia_categories)\n\nexport default { getRandomQuestions, getCategories };","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport QuestionDisplay from './components/QuestionDisplay';\nimport WelcomeDisplay from './components/WelcomeDisplay';\nimport CompletedDisplay from './components/CompletedDisplay';\nimport axiosServices from './services/opentdb';\n\n// index-0 skipped to use 1-based indexing\nconst INITIAL_ANSWERS = (numQuestions) => new Uint8Array(numQuestions + 2);\n\nfunction App() {\n  const [ currNumber, setNumber ] = useState(0); \n  const [ questions, setQuestion ] = useState([]);\n  const [ categories, setCategories ] = useState([]);\n  const [ settings, setQuizSettings ] = useState({difficulty: \"any\", numQuestions: 10, category: -1});\n  const [ answers, setAnswers ] = useState(INITIAL_ANSWERS(settings.numQuestions));\n  const [ loading, setLoading ] = useState(false);\n\n  const retrieveData = () => {\n    setLoading(true);\n    axiosServices.getRandomQuestions(settings).then(res => {\n      setQuestion([null].concat(res));\n      setAnswers(INITIAL_ANSWERS(settings.numQuestions));\n      setLoading(false);\n    })\n  }\n\n  useEffect(() => \n    axiosServices.getCategories().then(res => setCategories(res))\n  , [])\n\n  console.log(\"answer is \", answers);\n\n  console.log(questions[0]);\n  console.log(`Currently on question number ${currNumber}`);\n\n  const difficultyHandler = event => {\n    setQuizSettings({...settings, difficulty: event.target.value});\n  }\n\n  const numOfQuestionsHandler = event => {\n    const updatedSettings = {...settings, numQuestions: event.target.value};\n    setQuizSettings(updatedSettings);\n  }\n\n  const categoryHandler = event => {\n    const updatedSettings = {...settings, category: event.target.value};\n    setQuizSettings(updatedSettings);\n  }\n\n  const clickHandler = event => {\n    event.preventDefault();\n    let updatedAnswers = [...answers];\n    updatedAnswers[currNumber] = Number(event.currentTarget.value);\n    if (currNumber === 0) {\n      retrieveData();\n    }\n    setAnswers(updatedAnswers);\n    setNumber((currNumber + 1) % answers.length);\n  }\n\n  return (\n    <header className=\"App-header\">\n      {(!loading && currNumber === 0 && \n        <WelcomeDisplay \n        clickHandler={clickHandler} \n        categories={categories} \n        categoryHandler={categoryHandler}\n        numOfQuestionsHandler={numOfQuestionsHandler}\n        difficultyHandler={difficultyHandler}\n        settings={settings}\n        />\n      )}\n      {loading && <div><p>Loading...</p></div>}\n      {(!loading && currNumber !== settings.numQuestions + 1 && currNumber !== 0 && <div className=\"App\">\n        <QuestionDisplay questionData={questions[currNumber]} clickHandler={clickHandler}/>      \n      </div>)}\n      {(!loading && currNumber === settings.numQuestions + 1 &&\n        <CompletedDisplay answers={answers} clickHandler={clickHandler} />\n      )}\n    </header>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}